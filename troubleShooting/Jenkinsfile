pipeline {
    agent any
    environment {
        DOCKER = 'sudo docker'
    }

    stages {
        stage('Check directory') {
            steps {
                sh 'ls -al'
                script {
                    def commitAuthor = sh(script: 'git log -1 --pretty=%an', returnStdout: true).trim()
                    env.COMMIT_AUTHOR = commitAuthor

                    def commitMessage = sh(script: 'git log -1 --pretty=%B', returnStdout: true).trim()
                    env.COMMIT_MESSAGE = commitMessage
                }
            }
        }

        stage('Clone Repository') {
            steps {
                mattermostSend color: 'warning', message: ":angry_jenkins_face: 배포 시작! :angry_jenkins_face: \n`back/troubleShooting - #${env.BUILD_NUMBER}`\nStarted by GitLab push by ${env.COMMIT_AUTHOR}\n링크: ${env.BUILD_URL}"
                checkout scm
                echo 'Checkout Scm'
            }
        }

        stage('Remove Old Docker Image') {
            steps {
                script {
                    try {
                        sh 'docker rmi godseye93/troubleshooting:latest || true'
                    } catch (e) {
                        echo 'Failed to remove old Docker image'
                    }
                }
            }
        }

        stage('Build image') {
            steps {
                dir('troubleShooting') {
                    sh 'ls -al'
                    sh 'chmod +x ./gradlew'
                    sh './gradlew build'
                    sh 'docker login -u godseye93 -p wjdtmfgh123'
                    sh 'docker build -t godseye93/troubleshooting:latest .'
                }
                echo 'Build image...'
            }
        }

        stage('Push image') {
            steps {
                sh 'docker push godseye93/troubleshooting:latest'
                echo 'Push image to DockerHub...'
            }
        }

        stage('Remove Previous image') {
            steps {
                script {
                    try {
                        sh 'docker stop troubleshooting'
                        sh 'docker rm troubleshooting'
                    } catch (e) {
                        echo 'fail to stop and remove container'
                    }
                }
            }
        }
        stage('Run New image') {
            steps {
                sh 'docker run --name troubleshooting -d -p 8102:8102 godseye93/troubleshooting:latest'
                echo 'Run New member image'
            }
        }
    }
    post {
        success {
            mattermostSend color: 'good', message: ":jampepebyyeah: 배포 완료! :jampepebyyeah: \n`back/troubleShooting - #${env.BUILD_NUMBER}`\nStarted by changes from ${env.COMMIT_AUTHOR}\n**${env.COMMIT_MESSAGE}** \n링크: ${env.BUILD_URL}"
        }
        failure {
            mattermostSend color: 'danger', message: ":angry_pepe_2: 배포 실패! :angry_pepe_2: \n:angry_pepe_2: :angry_pepe_2: :angry_pepe_2: :angry_pepe_2: :angry_pepe_2: \n:angry_pepe_2: :angry_pepe_2: :angry_pepe_2: :angry_pepe_2: :angry_pepe_2:"
        }
    }
}
